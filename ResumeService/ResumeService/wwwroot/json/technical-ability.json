{
  "Introduction": "Hi There! My name is Chase Crawford. I am a self-taught software developer who specializes under the .NET Core Framework. Over the past 4 years I have worked my way from learning basic coding techniques in VBA to developing and implementing enterprise architectural solutions using C# and VB. Most recently, I have been working under a microservices architecture utilizing technologies like Docker and Azure API Management to deploy services both hosted in the Cloud and On-Prem environments.\n \n My interest began when I was working for a company called Denso Corporation, making reports through Microsoft Access and VBA, while finishing up my degree at East Carolina University as an Operation & Supply Chain Major. Unfortunately, I was too close to graduating when I discovered my strong interest in this field. This prevented me from switching majors, but with a very strong desire to learn, I began to dedicate all my remaining time learning the basics of Computer Science at ECU. I worked my way from learning basic syntax and understanding the different paradigms in languages and their interactions with the environment they run on to working with various frameworks and design patterns to better implement solutions with standardized coding practices. \n \n Though my time in the software field has been short, I have been fortunate to have resources and mentors available to guide my training and development. This has allowed me to use my knowledge on real world situations. Please feel free to contact me using the ''Contact Me'' button. I will get back to you as soon as possible.",
  "Summary": "Below is a list of languages, tools, and technologies I have either utilized or been exposed to over the past few years which I either feel comfortable using or have a strong understanding. ",
  "Programming Languages": [
    {
      "Technology": "C#",
      "TechnologyUse": "Most of my development and implementation of large enterprise solutions have been through C#. I have utilized it for desktop apps, web apps, web services, database applications, and much more. Among the various languages I use, C# is probably my strongest language."
    },
    {
      "Technology": "VB",
      "TechnologyUse": "Strong understanding and utilization of VB through my experience with desktop app development such as UWP and Windows Forms. Since I migrated over to C#, a few years since, I have not worked with VB as much, but I am still confident in my ability. VB was my original go to language due to my start in programming through VBA."
    },
    {
      "Technology": "Python",
      "TechnologyUse": "Most of my Python experience has been for analytical modeling, utilizing packages such as Pandas, NumPy, SciPy, Matplotlib, etc. I have also used it for automation and unit testing through frameworks like Selenium, and have helped deploy a analytical scripting environment within Tableau Server using TabPy."
    }
  ],
  "Scripting Languages": [
    {
      "Technology": "PowerShell",
      "TechnologyUse": "When it comes to a general-purpose automation language, PowerShell is my number one choice. I am a huge PowerShell nerd and can't think of many things you cannot do with PowerShell. From server configuration to data server migrations I've done it. Within an Azure Cloud environment, it's great for autonomous redeployment of services, especially templated environments which are constantly redeployed."
    },
    {
      "Technology": "JavaScript",
      "TechnologyUse": "I have a basic utilization and understanding of the language when compared to past peers, but do not consider myself to be a JavaScript (JS) Developer. I tend to have a strong reliance on the Bootstrap Framework and JQuery, and only rely on JS when functionality falls outside of Bootstrap Framework."
    },
    {
      "Technology": "ASP",
      "TechnologyUse": "Obviously with Web Development in ASP.NET Core Framework, the ASP aspect of web development is a must in order to implement a successful web application. I would consider my ability to be strong even though it is a very easy language to learn. I feel the difficulty in ASP is the application of design patterns with Web Development, which I tend to focus on and understand."
    },
    {
      "Technology": "VBScript",
      "TechnologyUse": "(I never use this, actually, no one should ever use this. Very unstable) Though I have used it, unfortunetly."
    }
  ],
  "Database Management": [
    {
      "Technology": "MS SQL (T-SQL)",
      "TechnologyUse": "I am very familiar with Microsoft SQL Server and have a strong comprehension and utilization of the software. I have both deployed and maintained various instances of SQL Server as well as worked with Integration Services Catalog, Analysis Services, and both Power BI and SSRS Report Servers."
    },
    {
      "Technology": "MySQL",
      "TechnologyUse": "My understanding of MySQL software is basic and does not extend beyond MySQL Workbench. I have a good understanding of syntax differences between SQL Server & MySQL."
    },
    {
      "Technology": "MongoDB",
      "TechnologyUse": "I have a good baseline understanding of deployment and utilization. I have only used MongoDB for personal projects such as video storage in GridFS or document-based collections. I do not have experience in large enterprise implementation (though I would love the opportunity)"
    }
  ],
  "Cloud Services": [
    {
      "Technology": "Azure",
      "TechnologyUse": "Azure is the only cloud service I utilize, though I have a strong understanding of the various resources available as well as scripting out deployment processes in Azure PowerShell. Most of my training and practice has been through the available services and environments offered by Azure, so I have a great understanding of deployment process, maintenance, and cost. I also know how to connect many cloud services to on-premise resources which persist the same security policy from you on-premise environment to your cloud services."
    }
  ],
  "Reporting Tools": [
    {
      "Technology": "SSRS",
      "TechnologyUse": "Possess a strong understanding of SSRS reports and the use of each ToolBox Item. Also have experience deploying and managing SSRS Report Server."
    },
    {
      "Technology": "Power BI",
      "TechnologyUse": "Have worked extensively with analytical modeling and visualization. Applied and utilized the various connectors available within Power BI which range from unstructured data sources such as MongoDB to structured data sets like SQL Server."
    },
    {
      "Technology": "Tableau",
      "TechnologyUse": "Have had basic exposure to Tableau and its functionality. I can build basic Reports, Dashboards, and Stories. I have also used Tableau Prep and initialized TabPy on Tableau Server for Python Scripting Integration."
    }
  ],
  "ETL Tools": [
    {
      "Technology": "SSIS",
      "TechnologyUse": "Have a good understanding of the array of ToolBox items within SSIS. I know how to easily create and deploy packages as well as interact with unstructured data using Scripted Tasks."
    }
  ],
  "Architectures": [
    {
      "Technology": "N'Tier",
      "TechnologyUse": "I have implemented solutions which encompass several layers that separate both responsibilities and dependencies within a multi-tier application. This current application is a good example of this since it ASP.NET Core Razor Application, though the only difference is that .NET Core defines the layers as the core component of the platform which relieves me from having to redefining it making my code more reusable."
    },
    {
      "Technology": "Microservices",
      "TechnologyUse": "Within my previous company, our Microservice Strategy Stack consisted of various technologies. Our Gateway was maintained in Azure API Management and deployment was a mixture of Azure Web Services and containerized services within Dockers Clusters. These were deployed through Jenkins using pre-existing pipelines."
    }
  ],
  "Design Patterns": [
    {
      "Technology": "Singleton",
      "TechnologyUse": "I tend to use this design pattern for restricting connection to Data Servers or other services to prevent the constant connect and reconnect within my code"
    },
    {
      "Technology": "Dependency Injection",
      "TechnologyUse": "I have used the concept of Dependency Injection in many projects I've develped as well as made my own IoC (Inversion of Controll) Container."
    },
    {
      "Technology": "MVC",
      "TechnologyUse": "Though other developers say this is an architectural pattern I tend to say it is both depending on perspective. From a design pattern perspective when developing I always try to make my code easily maintainable, Re-usability, readable such as reusable Modals and actions within Controllers."
    },
    {
      "Technology": "MVVM",
      "TechnologyUse": "When it comes to UI development that doesn't require many server views, I tend to fall toward this architectural pattern. It is easy to develop and implement, since you do not need to separate the action from the controller as compared to MVC."
    }
  ],
  "Networking": [
    {
      "Technology": "IIS",
      "TechnologyUse": "For personal development I've both deployed and configured IIS Management. I've created sites under different application pools which utilize Windows Authentication through AD Security Groups and Self-Signed Certificates."
    },
    {
      "Technology": "Active Directory",
      "TechnologyUse": "Have a good understanding of how to deploy domain controllers as parts of the AD Forest, manage AD Objects such as Users and Security Groups, and setup hybrid synchronization with on-premise AD to Azure AD."
    },
    {
      "Technology": "DNS",
      "TechnologyUse": ""
    }
  ],
  "Other": [
    {
      "Technology": "IDEs",
      "TechnologyUse": "Visual Studio, Visual Studio Code, PyCharm"
    },
    {
      "Technology": "Node.js",
      "TechnologyUse": ""
    },
    {
      "Technology": "Respositories",
      "TechnologyUse": "GitHub, BitBucket, Azure DevOps"
    },
    {
      "Technology": "Postman",
      "TechnologyUse": "For API Development"
    },
    {
      "Technology": "Docker",
      "TechnologyUse": "For Service Containerization"
    }

  ]
}
